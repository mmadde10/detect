{"version":3,"sources":["logo.svg","Form.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Form","props","onClickHandler","event","preventDefault","FormData","append","state","file","key","myHeaders","Headers","formdata","fetch","uriBase","method","headers","body","redirect","then","response","json","result","parseResponse","categories","catch","error","console","log","isPerson","onChange","bind","e","this","setState","target","files","forEach","item","name","includes","statement","type","accept","onClick","React","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"8KAAAA,EAAOC,QAAU,IAA0B,kC,8HCGtBC,E,kDAEjB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IA6BPC,eAAiB,SAACC,GACfA,EAAMC,kBACO,IAAIC,UACZC,OAAO,OAAQ,EAAKC,MAAMC,MAC/B,IAAIC,EAAM,mCAQV,IAAIC,EAAY,IAAIC,QACpBD,EAAUJ,OAAO,4BAA6BG,GAE9C,IAAIG,EAAW,IAAIP,SACnBO,EAASN,OAAO,OAAQ,EAAKC,MAAMC,MASnCK,MAlBUC,6GAWW,CACrBC,OAAQ,OACRC,QAASN,EACTO,KAAML,EACNM,SAAU,WAITC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAM,OAAI,EAAKC,cAAcD,EAAOE,eACzCC,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAI,QAASF,OAxDvC,EAAKnB,MAAO,CACVC,KAAM,KACNqB,SAAU,MAEZ,EAAKC,SAAW,EAAKA,SAASC,KAAd,gBAChB,EAAK7B,eAAiB,EAAKA,eAAe6B,KAApB,gBACtB,EAAKR,cAAgB,EAAKA,cAAcQ,KAAnB,gBARJ,E,qDAUVC,GACPC,KAAKC,SAAS,CAAC1B,KAAKwB,EAAEG,OAAOC,MAAM,O,oCAKvBZ,GAAY,IAAD,OACrBA,EAAWa,SAAQ,SAAAC,GACZA,EAAKC,KAAKC,SAAS,WAClB,EAAKN,SAAS,CAACL,UAAS,IAG5B,EAAKK,SAAS,CAACL,UAAS,S,+BAyC5B,IAAIY,EAUN,OARMA,EADAR,KAAK1B,MAAMsB,SACC,iDAEiB,IAAxBI,KAAK1B,MAAMsB,SACJ,0CAGA,iCAGhB,6BACI,8BACI,8DACA,8CACA,2BAAOa,KAAK,OAAOZ,SAAUG,KAAKH,SAAWa,OAAO,YACpD,4BAAQD,KAAK,SAASE,QAASX,KAAK/B,gBAApC,WAEHuC,O,GAnFqBI,IAAMC,WCUzBC,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1C,MAAK,SAAA2C,GACJA,EAAaC,gBAEdtC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMsC,c","file":"static/js/main.28fbbaa3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport './App.css';\n\nexport default class Form extends React.Component {\n\n    constructor(props) {\n      super(props);\n      this.state ={\n        file: null,\n        isPerson: null\n      }\n      this.onChange = this.onChange.bind(this)\n      this.onClickHandler = this.onClickHandler.bind(this)\n      this.parseResponse = this.parseResponse.bind(this)\n    }\n    onChange(e) {\n      this.setState({file:e.target.files[0]})\n    }\n\n    //takes in categories object from response, loops throught to find if any \n    //contain people_, if they do set state.isPerson to true, else set it to false\n    parseResponse(categories){\n        categories.forEach(item => {\n            if(item.name.includes(\"people_\")){\n                this.setState({isPerson:true})\n        }\n        else{\n            this.setState({isPerson:false})\n        }\n    \n    });\n    }\n\n    //When a photo is added, create form data with photo in it, create azure computer vision request, if we get a response, parse to json , \n    // then send to response.categories to parseResponse, else throw error\n     onClickHandler = (event) => {\n        event.preventDefault()\n        const data = new FormData() \n        data.append('file', this.state.file)\n        let key = \"85c35b7aa9be4b4fab963c30a13b158f\";\n        let endpoint =  \"https://visionmadden.cognitiveservices.azure.com/\";\n        var uriBase = endpoint + \"vision/v3.0\";\n        let url = uriBase + \"/analyze?visualFeatures=Categories&language=en\"\n        if (!key) { \n            throw new Error('Set your environment variables for your subscription key and endpoint.'); \n        }\n\n        var myHeaders = new Headers();\n        myHeaders.append(\"Ocp-Apim-Subscription-Key\", key);\n\n        var formdata = new FormData();\n        formdata.append(\"file\", this.state.file);\n\n        var requestOptions = {\n        method: 'POST',\n        headers: myHeaders,\n        body: formdata,\n        redirect: 'follow'\n        };\n\n        fetch(url, requestOptions)\n        .then(response => response.json())\n        .then(result => this.parseResponse(result.categories))\n        .catch(error => console.log('error', error));\n    }\n\n  \n    render() {\n        let statement\n        if (this.state.isPerson) {\n            statement = <h3>Contains people!</h3>;\n        }\n        else if (this.state.isPerson === false){\n            statement = <h3>No People!</h3>;\n        }\n        else{\n            statement = <h3> </h3>;\n        } \n      return (\n        <div>\n            <form>\n                <h1>Does you photo contain people?</h1>\n                <h1>Upload a Photo</h1>\n                <input type=\"file\" onChange={this.onChange}  accept=\"image/*\"/>\n                <button type=\"submit\" onClick={this.onClickHandler}>Upload</button>\n            </form>\n            {statement}\n        </div>\n     )\n    }\n  }","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Form from './Form';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Form/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}